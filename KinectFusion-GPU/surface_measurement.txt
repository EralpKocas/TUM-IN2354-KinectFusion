//
// Created by eralpkocas on 25.06.21.
//

#include "surface_measurement.h"

bool init_multiscale(SurfaceLevelData* surf_data, ImageData img_data)
{
    float bilateral_color_sigma = 1.;
    float bilateral_spatial_sigma = 1.;
    int depth_diameter = 3 * (int) bilateral_color_sigma;

    for(int i=0; i < surf_data->level; i++)
    {
        if(i==0){
            surf_data->curr_level_data[i].upload(img_data.m_depthMap);
            cv::bilateralFilter(surf_data->curr_level_data[i], surf_data->curr_smoothed_data[i],
                                depth_diameter, bilateral_color_sigma, bilateral_spatial_sigma, cv::BORDER_DEFAULT);
        }
        else{
            cv::pyrDown(surf_data->curr_smoothed_data[i-1],
                        surf_data->curr_smoothed_data[i]);
        }
    }
    return true;
}

void compute_vertex_map(SurfaceLevelData* surf_data){
    for(int i=0; i < surf_data->level; i++){
        dim3 block(8, 8);
        float rows = surf_data->level_img_width[i];
        float cols = surf_data->level_img_height[i];
        cv::cuda::GpuMat& depth_map = surf_data->curr_level_data[i];
        cv::cuda::GpuMat& vertex_map = surf_data->vertex_map[i];
        dim3 grid((cols + block.x - 1) / block.x, (rows + block.y - 1) / block.y);
        helper_compute_vertex_map<<<grid, block>>>(surf_data, depth_map, vertex_map, surf_data->level_fX[i],
                surf_data->level_fY[i], surf_data->level_cX[i], surf_data->level_cY[i],
                surf_data->level_img_width[i], surf_data->level_img_height[i], i);
        assert(cudaSuccess == cudaDeviceSynchronize());
    }
}

void compute_normal_map(SurfaceLevelData* surf_data){
    for(int i=0; i < surf_data->level; i++){
        dim3 block(8, 8);
        float rows = surf_data->level_img_width[i];
        float cols = surf_data->level_img_height[i];
        cv::cuda::GpuMat& vertex_map = surf_data->vertex_map[i];
        cv::cuda::GpuMat& normal_map = surf_data->normal_map[i];
        dim3 grid((cols + block.x - 1) / block.x, (rows + block.y - 1) / block.y);
        helper_compute_normal_map<<<grid, block>>>(surf_data, vertex_map, normal_map,
                surf_data->level_img_width[i], surf_data->level_img_height[i], i);
        assert(cudaSuccess == cudaDeviceSynchronize());
    }
}

void surface_measurement_pipeline(SurfaceLevelData* surf_data, ImageData img_data){
    init_multiscale(surf_data, img_data);
    compute_vertex_map(surf_data);
    compute_normal_map(surf_data);
}